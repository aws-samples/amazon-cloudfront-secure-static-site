AWSTemplateFormatVersion: '2010-09-09'
Description: ACFS3 - CloudFront with Header Security and site content
Transform: AWS::Serverless-2016-10-31
Parameters:
  CertificateArn:
    Description: Certificate locater
    Type: String
  DomainName:
    Description: Apex domain
    Type: String
  SubDomain:
    Description: Subdomain
    Type: String
  SubDomain:
    Description: Subdomain
    Type: String
  S3BucketLogs:
    Description: Logging Bucket
    Type: String
  AmplifyHosting:
    Description: Amplify static hosting endpoint
    Type: String
  Branch:
    Description: GitHub Repository Branch
    Type: String
  WithDomainName:
    Description: Use custom domaine name
    Type: String
  S3BucketRoot:
    Description: Content Bucket
    Type: String
  S3BucketLogsName:
    Description: Logging Bucket
    Type: String
  S3BucketRootName:
    Description: Content Bucket
    Type: String
  S3BucketRootArn:
    Description: Content Bucket locator
    Type: String
  CreateApex:
    Type: String
  StackName:
    Type: String
  SecuredEdgeLambdaArn:
    Type: String
Conditions:
  CreateApexConfig: !Equals
    - !Ref 'CreateApex'
    - 'yes'
  ShouldCreateAcmResource:
    !Equals [true, !Ref WithDomainName]
Resources:
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3BucketRoot'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub '${S3BucketRootArn}/*'
            Principal:
              CanonicalUser: !GetAtt 'CloudFrontOriginAccessIdentity.S3CanonicalUserId'
  CloudFrontFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - cloudfront.amazonaws.com
      Policies:
        - PolicyName: CloudfrontPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:UpdateRoleDescription
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                  - iam:CreateServiceLinkedRole
                  - iam:ListRoles
                  - iam:PassRole
                Resource: arn:aws:iam::*:role/aws-service-role/*
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:GetFunctionEventInvokeConfig
                  - lambda:GetLayerVersion
                  - lambda:GetLayerVersionPolicy
                  - lambda:InvokeFunction
                  - lambda:DisableReplication
                  - lambda:EnableReplication
                  - lambda:GetAlias
                Resource: !Sub 'arn:${AWS::Partition}:lambda:us-east-1:${AWS::AccountId}:function:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetBucketAcl
                  - s3:PutBucketAcl
                Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateDistribution
                  - cloudfront:CreateDistributionWithTags
                  - cloudfront:DeleteDistribution
                  - cloudfront:GetDistribution
                  - cloudfront:GetDistributionConfig
                  - cloudfront:ListTagsForResource
                  - cloudfront:TagResource
                  - cloudfront:UntagResource
                  - cloudfront:UpdateDistribution
                  - cloudfront:ListCloudFrontOriginAccessIdentities
                Resource: !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateCloudFrontOriginAccessIdentity
                  - cloudfront:DeleteCloudFrontOriginAccessIdentity
                  - cloudfront:GetCloudFrontOriginAccessIdentity
                  - cloudfront:GetCloudFrontOriginAccessIdentityConfig
                  - cloudfront:UpdateCloudFrontOriginAccessIdentity
                Resource: !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:origin-access-identity/*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateCachePolicy
                  - cloudfront:DeleteCachePolicy
                  - cloudfront:GetCachePolicy
                  - cloudfront:ListCachePolicies
                  - cloudfront:UpdateCachePolicy
                  - cloudfront:GetCloudFrontOriginAccessIdentityConfig
                Resource: !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:cache-policy/*'
      Tags:
        - Key: Solution
          Value: ACFS3
  CloudfrontCustomFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt 'CloudFrontFunctionRole.Arn'
      CodeUri: ../source/python/cloudfront
      Runtime: python3.8
      Timeout: 300
      Description: manage cloudfront resources faster than native
  CloudFrontDistribution:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      loglevel: info
      Apex: !Ref 'CreateApex'
      Subdomain: !Ref 'SubDomain'
      Domain: !Ref 'DomainName'
      StackName: !Ref 'StackName'
      SiteBucketRootName: !Ref 'S3BucketRootName'
      SiteBucketArn: !Ref 'S3BucketRootArn'
      LogsBucket: !Ref 'S3BucketLogsName'
      CertArn: !Ref 'CertificateArn'
      OAI: !Ref 'CloudFrontOriginAccessIdentity'
      SecureEdgeFunctionArn: !Ref 'SecuredEdgeLambdaArn'
      RoleArn: !GetAtt 'CloudFrontFunctionRole.Arn'
      ServiceToken: !GetAtt 'CloudfrontCustomFunction.Arn'
      AmplifyHosting: !Ref 'AmplifyHosting'
      Branch: !Ref 'Branch'
      WithDomainName: !Ref 'WithDomainName'
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${SubDomain}.${DomainName}'
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: ShouldCreateAcmResource
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
        - Name: !Sub '${SubDomain}.${DomainName}'
          Type: A
          AliasTarget:
            DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2
  ApexRoute53RecordSetGroup:
    Condition: CreateApexConfig
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
        - Name: !Ref 'DomainName'
          Type: A
          AliasTarget:
            DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2
Outputs:
  CloudFrontDistribution:
    Description: CloudFront distribution
    Value: !GetAtt 'CloudFrontDistribution.DomainName'
  DistributionId:
    Description: CloudFront distribution
    Value: !GetAtt 'CloudFrontDistribution.DistroId'
  Status:
    Description: CloudFront distribution
    Value: !GetAtt 'CloudFrontDistribution.Status'
  Etag:
    Description: CloudFront distribution
    Value: !GetAtt 'CloudFrontDistribution.ETag'
  CloudFrontDomainName:
    Description: Website address
    Value: !Sub '${SubDomain}.${DomainName}'
